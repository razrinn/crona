{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from \"react\";\nexport default (function (url) {\n  var _useState = useState(),\n      data = _useState[0],\n      setData = _useState[1];\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var result;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (response) {\n                return response.json();\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n              result = _context.sent;\n              setData(result);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  }, []);\n  return data;\n});","map":{"version":3,"sources":["/home/razrinn/code/real/coronavirus/utils/useData.js"],"names":["useState","useEffect","url","data","setData","fetchData","fetch","then","response","json","err","result"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,gBAAe,UAACC,GAAD,EAAS;AAAA,kBACIF,QAAQ,EADZ;AAAA,MACbG,IADa;AAAA,MACPC,OADO;;AAEpBH,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMI,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACOC,KAAK,CAACJ,GAAD,CAAL,CAChBK,IADgB,CACX,UAACC,QAAD;AAAA,uBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,eADW,WAEV,UAACC,GAAD;AAAA,uBAASA,GAAT;AAAA,eAFU,CADP;;AAAA;AACRC,cAAAA,MADQ;AAIdP,cAAAA,OAAO,CAACO,MAAD,CAAP;;AAJc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAMAN,IAAAA,SAAS;AACZ,GARQ,EAQN,EARM,CAAT;AASA,SAAOF,IAAP;AACH,CAZD","sourcesContent":["import { useState, useEffect } from \"react\";\nexport default (url) => {\n    const [data, setData] = useState();\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await fetch(url)\n                .then((response) => response.json())\n                .catch((err) => err);\n            setData(result);\n        }\n        fetchData();\n    }, []);\n    return data;\n}\n"]},"metadata":{},"sourceType":"module"}