{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from \"react\";\nimport { summaryUrl, areaUrl, dailyUrl } from \"./url\";\n\nvar fetchData = function fetchData(url) {\n  var _useState = useState(),\n      data = _useState[0],\n      setData = _useState[1];\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var result;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"Fetching data...\");\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (response) {\n                return response.json();\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 3:\n              result = _context.sent;\n              setData(result);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  }, []);\n  return data;\n};\n\nvar useSummaryStats = function useSummaryStats() {\n  return fetchData(summaryUrl);\n};\n\nvar useProvinceStats = function useProvinceStats() {\n  return fetchData(areaUrl);\n};\n\nvar useLastUpdate = function useLastUpdate() {\n  var response = fetchData(dailyUrl);\n  return response ? new Date(response.data[response.data.length - 1].tanggal) : null;\n};\n\nvar usePercentageStats = function usePercentageStats() {\n  var response = fetchData(dailyUrl);\n  var recentData = response ? response.data[response.data.length - 1] : null;\n  return recentData ? {\n    perawatan: recentData.persentasePasiendalamPerawatan.toFixed(2),\n    sembuh: recentData.persentasePasienSembuh.toFixed(2),\n    meninggal: recentData.persentasePasienMeninggal.toFixed(2)\n  } : null;\n};\n\nvar useDailyStats = function useDailyStats() {\n  return fetchData(dailyUrl);\n};\n\nexport { useSummaryStats, useProvinceStats, useLastUpdate, usePercentageStats, useDailyStats };","map":{"version":3,"sources":["/home/razrinn/code/real/coronavirus/utils/fetcher.js"],"names":["useState","useEffect","summaryUrl","areaUrl","dailyUrl","fetchData","url","data","setData","console","log","fetch","then","response","json","err","result","useSummaryStats","useProvinceStats","useLastUpdate","Date","length","tanggal","usePercentageStats","recentData","perawatan","persentasePasiendalamPerawatan","toFixed","sembuh","persentasePasienSembuh","meninggal","persentasePasienMeninggal","useDailyStats"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,QAA9B,QAA8C,OAA9C;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAS;AAAA,kBACCN,QAAQ,EADT;AAAA,MAChBO,IADgB;AAAA,MACVC,OADU;;AAEvBP,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMI,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AACdI,cAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AADc;AAAA,+CAEOC,KAAK,CAACL,GAAD,CAAL,CAChBM,IADgB,CACX,UAACC,QAAD;AAAA,uBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,eADW,WAEV,UAACC,GAAD;AAAA,uBAASA,GAAT;AAAA,eAFU,CAFP;;AAAA;AAERC,cAAAA,MAFQ;AAKdR,cAAAA,OAAO,CAACQ,MAAD,CAAP;;AALc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAOAX,IAAAA,SAAS;AACZ,GATQ,EASN,EATM,CAAT;AAUA,SAAOE,IAAP;AACH,CAbD;;AAeA,IAAMU,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAMZ,SAAS,CAACH,UAAD,CAAf;AAAA,CAAxB;;AACA,IAAMgB,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAMb,SAAS,CAACF,OAAD,CAAf;AAAA,CAAzB;;AACA,IAAMgB,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB,MAAMN,QAAQ,GAAGR,SAAS,CAACD,QAAD,CAA1B;AACA,SAAOS,QAAQ,GACT,IAAIO,IAAJ,CAASP,QAAQ,CAACN,IAAT,CAAcM,QAAQ,CAACN,IAAT,CAAcc,MAAd,GAAuB,CAArC,EAAwCC,OAAjD,CADS,GAET,IAFN;AAGH,CALD;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC7B,MAAMV,QAAQ,GAAGR,SAAS,CAACD,QAAD,CAA1B;AACA,MAAMoB,UAAU,GAAGX,QAAQ,GACrBA,QAAQ,CAACN,IAAT,CAAcM,QAAQ,CAACN,IAAT,CAAcc,MAAd,GAAuB,CAArC,CADqB,GAErB,IAFN;AAGA,SAAOG,UAAU,GACX;AACIC,IAAAA,SAAS,EAAED,UAAU,CAACE,8BAAX,CAA0CC,OAA1C,CAAkD,CAAlD,CADf;AAEIC,IAAAA,MAAM,EAAEJ,UAAU,CAACK,sBAAX,CAAkCF,OAAlC,CAA0C,CAA1C,CAFZ;AAGIG,IAAAA,SAAS,EAAEN,UAAU,CAACO,yBAAX,CAAqCJ,OAArC,CAA6C,CAA7C;AAHf,GADW,GAMX,IANN;AAOH,CAZD;;AAaA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM3B,SAAS,CAACD,QAAD,CAAf;AAAA,CAAtB;;AACA,SACIa,eADJ,EAEIC,gBAFJ,EAGIC,aAHJ,EAIII,kBAJJ,EAKIS,aALJ","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { summaryUrl, areaUrl, dailyUrl } from \"./url\";\n\nconst fetchData = (url) => {\n    const [data, setData] = useState();\n    useEffect(() => {\n        const fetchData = async () => {\n            console.log(\"Fetching data...\");\n            const result = await fetch(url)\n                .then((response) => response.json())\n                .catch((err) => err);\n            setData(result);\n        };\n        fetchData();\n    }, []);\n    return data;\n};\n\nconst useSummaryStats = () => fetchData(summaryUrl);\nconst useProvinceStats = () => fetchData(areaUrl);\nconst useLastUpdate = () => {\n    const response = fetchData(dailyUrl);\n    return response\n        ? new Date(response.data[response.data.length - 1].tanggal)\n        : null;\n};\nconst usePercentageStats = () => {\n    const response = fetchData(dailyUrl);\n    const recentData = response\n        ? response.data[response.data.length - 1]\n        : null;\n    return recentData\n        ? {\n              perawatan: recentData.persentasePasiendalamPerawatan.toFixed(2),\n              sembuh: recentData.persentasePasienSembuh.toFixed(2),\n              meninggal: recentData.persentasePasienMeninggal.toFixed(2),\n          }\n        : null;\n};\nconst useDailyStats = () => fetchData(dailyUrl);\nexport {\n    useSummaryStats,\n    useProvinceStats,\n    useLastUpdate,\n    usePercentageStats,\n    useDailyStats,\n};\n"]},"metadata":{},"sourceType":"module"}